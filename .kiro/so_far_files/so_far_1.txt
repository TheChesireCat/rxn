# RXN Project Context Summary

## Project Identity
**rxn** = "Live Chain Reaction" - Real-time multiplayer strategy game. Players place orbs on grid â†’ trigger chain reactions â†’ capture opponent cells â†’ last player wins.

## File System Structure
```
/projects/rxn/
â”œâ”€â”€ .kiro/
â”‚   â”œâ”€â”€ specs/live-chain-reaction/          # Formal specifications
â”‚   â”‚   â”œâ”€â”€ requirements.md                 # 11 EARS format requirements  
â”‚   â”‚   â”œâ”€â”€ design.md                      # Architecture & components
â”‚   â”‚   â””â”€â”€ tasks.md                       # 21 implementation tasks (17âœ… 4ðŸš§)
â”‚   â””â”€â”€ bkp_prompts/prompt_files/          # Early development docs
â”‚       â”œâ”€â”€ Spec_Prompt.txt                # Kiro workflow guide
â”‚       â”œâ”€â”€ instant.txt                    # InstantDB integration guide
â”‚       â”œâ”€â”€ guide.txt                      # Game loop algorithm
â”‚       â””â”€â”€ supabase_guide.txt             # Alt database option
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ app/api/                          # Server-side routes (use adminDb)
â”‚   â”œâ”€â”€ components/                       # React components (use db)
â”‚   â”œâ”€â”€ lib/
â”‚   â”‚   â”œâ”€â”€ instant.ts                    # Client-side InstantDB
â”‚   â”‚   â”œâ”€â”€ admin.ts                      # Server-side InstantDB
â”‚   â”‚   â””â”€â”€ gameLogic.ts                  # Core game mechanics
â”‚   â””â”€â”€ types/game.ts                     # TypeScript definitions
â”œâ”€â”€ instant.schema.ts                     # Database schema
â””â”€â”€ instant.perms.ts                      # Access rules
```

## Current Status: 85% Complete
**âœ… Implemented**: Core game logic, real-time sync, auth, UI, room management, spectator mode, chat, timers, undo
**ðŸš§ Remaining**: Emoji reactions, player stats, error handling, E2E tests

## Technical Stack
- **Frontend**: Next.js 15, React 19, TypeScript, TailwindCSS v4
- **Database**: InstantDB (real-time), server-authoritative architecture
- **Animation**: React Spring for orb movements
- **Testing**: Vitest

## Key Concepts

### Game Mechanics
- **Critical Mass**: corners=2, edges=3, center=4 orbs
- **Chain Reactions**: Explosions spread orbs to adjacent cells, capturing them
- **Elimination**: Player eliminated when orb count = 0 (after first move)
- **Victory**: Last player with orbs wins

### Architecture Pattern
- **Server Authority**: All game logic in API routes using `adminDb`
- **Client Rendering**: React components use `db` for real-time updates
- **Real-time Sync**: InstantDB handles state synchronization
- **Atomic Transactions**: Prevent race conditions

### Specs Workflow
1. **Requirements** â†’ EARS format acceptance criteria
2. **Design** â†’ Architecture, components, data models  
3. **Tasks** â†’ Implementation checklist with requirement tracing

## Recent Issue: Fixed InstantDB Client/Admin Separation
- **Problem**: Using React client (`@instantdb/react`) in server API routes
- **Solution**: Created admin client (`@instantdb/admin`) for server-side operations
- **Pattern**: Client code uses `db`, server code uses `adminDb`

## Development Context
Project follows spec-driven development via Kiro workflow. Well-documented with comprehensive requirements, design docs, and nearly complete implementation. Ready for final feature completion and testing.
