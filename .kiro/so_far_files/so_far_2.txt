# RXN Project - Current Status Summary

## Project Overview
**RXN (Live Chain Reaction)** - A real-time multiplayer strategy game built with Next.js 15, React 19, TypeScript, and InstantDB. Players place orbs on a grid, trigger chain reactions when cells reach critical mass, capture opponent cells, and compete to be the last player standing.

## Today's Debugging Session Summary

### Initial State
- Fresh InstantDB cloud setup
- Project was 85% complete but not running
- Missing InstantDB admin configuration

### Issues Fixed

#### 1. **InstantDB Setup Issues** ✅
- **Problem**: Missing `@instantdb/admin` package and admin token
- **Solution**: 
  - Installed `@instantdb/admin` package
  - Added `INSTANT_ADMIN_TOKEN` to `.env` file
  - Created schema push scripts

#### 2. **API Method Issues** ✅
- **Problem**: All API routes using non-existent `queryOnce()` method
- **Pattern Fixed**:
  ```javascript
  // ❌ Before (wrong):
  const roomQuery = await db.queryOnce({...});
  const room = roomQuery.data.rooms[0];
  
  // ✅ After (correct):
  const roomQuery = await db.query({...});
  const room = roomQuery.rooms[0];
  ```
- **Fixed in 6 API routes**: room/[id], room/join, game/start, game/move, game/undo, game/timeout

#### 3. **Room Creation & Navigation** ✅
- **Problem**: API returning `roomId` but frontend expecting `id`
- **Solution**: Modified API to return `id` field to match Room type

#### 4. **Presence System** ✅
- **Problem**: `room.publishPresence` is not a function
- **Solution**: Updated to use correct InstantDB presence API pattern where `publishPresence` is returned from `usePresence()` hook

#### 5. **Reactions/Topics System** ✅
- **Problem**: `room.subscribeTopic` is not a function
- **Solution**: Created simplified local implementation (feature marked as incomplete)

#### 6. **UI Issues** ✅
- **Problem**: Game time limit input showing seconds instead of minutes
- **Solution**: Display value divided by 60 to show minutes

## Current Working Features

### ✅ Fully Functional
- Room creation with customizable settings
- Room joining (as player or spectator)
- Real-time presence tracking (online/offline status)
- Game lobby with player management
- Game starting (requires 2+ players)
- Move making and chain reactions
- Turn management
- Win/loss detection
- Chat messaging
- Undo moves (when enabled)
- Timeout handling
- Session management

### 🔧 Partially Implemented
- Emoji reactions (local only, not synced between players)
- Player statistics (structure in place, not persisted)

## Technical Architecture

### Database: InstantDB
- **Client SDK**: `@instantdb/react` for real-time subscriptions
- **Admin SDK**: `@instantdb/admin` for server-side operations
- **Pattern**: Server-authoritative architecture
  - Client (`db`) for real-time UI updates
  - Admin (`adminDb`) for game logic in API routes

### Key Files & Patterns

```
/projects/rxn/
├── .env                          # Contains INSTANT_APP_ID and INSTANT_ADMIN_TOKEN
├── instant.schema.ts             # Database schema definition
├── instant.perms.ts              # Security rules
├── src/
│   ├── app/api/                 # Server routes (use adminDb)
│   │   ├── room/                # Room management
│   │   ├── game/                # Game logic
│   │   ├── chat/                # Chat functionality
│   │   └── user/                # User management
│   ├── components/              # React components (use db)
│   ├── lib/
│   │   ├── instant.ts          # Client-side InstantDB setup
│   │   ├── admin.ts            # Server-side InstantDB setup
│   │   ├── gameLogic.ts        # Core game mechanics
│   │   └── hooks/              # Custom React hooks
│   └── types/game.ts           # TypeScript definitions
```

### API Pattern
All API routes follow this pattern:
```typescript
// Server-side API route
import { adminDb } from '@/lib/admin';

const roomQuery = await adminDb.query({
  rooms: { $: { where: { id: roomId } } }
});
const room = roomQuery.rooms[0];
```

### Client Pattern
React components use real-time subscriptions:
```typescript
// Client-side component
import { db } from '@/lib/instant';

const { data, isLoading, error } = db.useQuery({
  rooms: { $: { where: { id: roomId } } }
});
```

## Environment Setup

### Required Environment Variables
```bash
# .env file
NEXT_PUBLIC_INSTANT_APP_ID=b77288d8-9085-41f6-927e-79e8a8ac5c45
INSTANT_ADMIN_TOKEN=01d2214a-336b-4169-9cf2-ec5b5d15f9c9  # Get from InstantDB dashboard
```

### NPM Scripts
```json
{
  "dev": "next dev --turbopack",
  "instant:test": "node test-instant.js",
  "instant:push": "npx @instantdb/cli push",
  "instant:setup": "node setup-instant.js"
}
```

## Remaining Tasks (from .kiro/specs)

### 🚧 In Progress (4 tasks)
1. **Emoji Reactions** - Local implementation done, needs real-time sync via InstantDB topics
2. **Player Statistics** - Schema exists, needs persistence logic
3. **Error Handling** - Basic error boundaries in place, needs comprehensive coverage
4. **E2E Tests** - Test infrastructure set up, tests not written

### Game Mechanics Notes
- **Critical Mass**: Corner cells = 2, Edge cells = 3, Center cells = 4 orbs
- **Chain Reactions**: Automatic explosions when critical mass reached
- **Elimination**: Players eliminated when orb count = 0 (after first move)
- **Runaway Detection**: Game ends if chain reaction exceeds 100 iterations

## Known Limitations
1. InstantDB topics API not fully documented - reactions using local state
2. Player stats not persisting across sessions
3. No reconnection handling for disconnected players
4. No room cleanup for abandoned games

## Development Commands

```bash
# Start development
npm run dev

# Test InstantDB connection
npm run instant:test

# Push schema changes
npm run instant:push

# Full InstantDB setup
npm run instant:setup
```

## Testing the Game
1. Create a room with desired settings
2. Share room URL or ID with other players
3. Wait for minimum 2 players in lobby
4. Host clicks "Start Game"
5. Players take turns clicking cells to place orbs
6. Watch for chain reactions when cells reach critical mass
7. Last player with orbs wins!

## Current Status: 90% Complete
The game is fully playable with core features working. Remaining work focuses on polish features (reactions, stats) and testing.
